import { Card } from '../ui/Card.tsx';
import { Button } from '../ui/Button.tsx';

interface ResponseDisplayProps {
  response: string;
  modelUsed: string;
  executionTime: number;
  usage?: {
    prompt_tokens: number;
    completion_tokens: number;
    total_tokens: number;
  };
  finishReason?: string;
  onCopy?: () => void;
  onRegenerate?: () => void;
  isLoading?: boolean;
}

export const ResponseDisplay: React.FC<ResponseDisplayProps> = ({
  response,
  modelUsed,
  executionTime,
  usage,
  finishReason,
  onCopy,
  onRegenerate,
  isLoading = false,
}) => {
  const formatTime = (ms: number) => {
    return ms < 1000 ? `${ms}ms` : `${(ms / 1000).toFixed(1)}s`;
  };

  const formatTokens = (tokens: number) => {
    return tokens.toLocaleString();
  };

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(response);
      onCopy?.();
    } catch (err) {
      console.error('Failed to copy to clipboard:', err);
    }
  };

  return (
    <div className="space-y-3">
      {/* Execution Info */}
      <div className="flex items-center justify-between text-xs text-gray-500">
        <span>Generated by {modelUsed}</span>
        <span>{formatTime(executionTime)}</span>
      </div>

      {/* Response Content - Compact */}
      <div className="bg-gray-50 rounded-lg p-3 max-h-64 overflow-y-auto">
        <div className="whitespace-pre-wrap text-sm text-gray-900 leading-relaxed">
          {response}
        </div>
      </div>

      {/* Model and Performance Info - Inline */}
      <div className="flex items-center justify-between text-xs text-gray-500">
        <div className="flex items-center gap-4">
          <span>Model: <span className="font-medium text-gray-900">{modelUsed}</span></span>
          {usage && (
            <span>Tokens: <span className="font-medium text-gray-900">{formatTokens(usage.total_tokens)}</span></span>
          )}
        </div>
        {finishReason && (
          <span className="text-gray-400">{finishReason}</span>
        )}
      </div>

      {/* Actions - Compact */}
      <div className="flex space-x-2">
        <Button
          variant="outline"
          onClick={copyToClipboard}
          size="sm"
          className="flex-1"
        >
          Copy
        </Button>
        {onRegenerate && (
          <Button
            variant="outline"
            onClick={onRegenerate}
            disabled={isLoading}
            size="sm"
            className="flex-1"
          >
            {isLoading ? 'Regenerating...' : 'Regenerate'}
          </Button>
        )}
      </div>
    </div>
  );
};
